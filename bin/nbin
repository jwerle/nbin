#!/usr/bin/env node

var program = require('commander')
	, nbin = require('../')
	, pkg = require('../package')
	, cwd = process.cwd()

var cmds = [
	'ls'
];

program.version(pkg.version)

if (process.argv.length > 2 && !~process.argv[2].indexOf('-') && !~cmds.indexOf(process.argv[2])) {
	var args = process.argv.slice(2)
		,	cmd = args[0]

var c = program.command(cmd)
		.description(cmd)
		.action(function (action) {
			var args = action.args? [action.args] : process.argv.slice(process.argv.indexOf(cmd) + 1)
			try { nbin(cwd).exec(cmd, args).pipe(process.stdout); }
			catch (e) { console.log(e.message); }
		});
c.help = function () {}
// overload unkown options
c.unknownOption = function () {

};

} else if (process.argv.length === 2) {
	// push help to stack if no command being executed
	process.argv.push('--help');
}



program.command('ls')
	.description("list all bins found in module")
	.action(function () {
		var bins = nbin.bins(cwd)
			,	binpath = [cwd, 'node_modules', '.bin'].join('/')
			, puts = console.log.bind(console, ' ')
		
		puts();
		puts('cwd:', cwd);
		puts('.bin:', binpath);
		puts()
		if (bins.length) {
			bins.map(function (bin) {
				puts('  o', bin, '('+ [binpath, bin].join('/') +')');
			});
		} else {
			puts('  -', "no bins found");
		}
		puts();
	});

program.parse(process.argv);
